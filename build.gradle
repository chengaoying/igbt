apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'

ext.env = System.getenv()
ext.props = project.properties

sourceCompatibility = '1.3'
targetCompatibility = '1.1'
group = validprop('jmeGroup')
archivesBaseName = property('jmeArchivesBaseName')
version = validprop('jmeVersion')

defaultTasks 'helpJme'

def validprop(name) {
	if (project.hasProperty(name)) {
		project.property(name)
	}
	else {
		''
	}
}

def isMidlet() {
	project.hasProperty('telcom')&&project.hasProperty('sp')&&project.hasProperty('midlet')
}

def renderTemplate(text, binding) {
	def engine = new groovy.text.SimpleTemplateEngine()
	def template = engine.createTemplate(text).make(binding)
	template.toString()
}

def renderTemplateFile(f, binding) {
	def text = f instanceof File ? f.getText() : file(f).getText()
	renderTemplate(text, binding)
}

def writeAppDesc(f) {
	def file = f instanceof File ? f : file(f)
	file.write("MIDlet-Version: 1.0.0\r\n")
	file.append("MIDlet-Vendor: MIDlet Suite Vendor\r\n")
	file.append("MIDlet-Jar-URL: ${uberJme.archiveName}\r\n")
	file.append("MicroEdition-Configuration: CLDC-1.1\r\n")
	file.append("MicroEdition-Profile: MIDP-2.0\r\n")
	file.append("MIDlet-Name: ${archivesBaseName} MIDlet Suite\r\n")
	if (project.hasProperty('midlet')) {
		file.append("MIDlet-1: ${archivesBaseName}MIDlet,,${midlet}\r\n")
	}
}

def jadName(name) {
	def str = name.toString()
	str[0..<str.length()-1]+"d"
}

configurations {
	jme
	wtkProvide
	compile.extendsFrom(wtkProvide)
}

repositories {
	flatDir name: 'wtk', dirs: "${env.WTK_HOME}/lib"
	mavenLocal()
}

dependencies {
	wtkProvide ':cldcapi11:@jar'
	wtkProvide ':midpapi20:@jar'
}

compileJava {
	if (project.hasProperty('srcEncoding')) {
		options.encoding = srcEncoding
	}
	options.bootClasspath = configurations.wtkProvide.inject(""){a, b -> a+b+':'}
}

task preverify(type: Exec) {
	dependsOn compileJava
	ext.destinationPath = "${buildDir}/iptv/classes"
	executable "${env.WTK_HOME}/bin/preverify"
	args '-classpath', configurations.compile.inject(""){a, b -> a+b+';'}
	args '-d', destinationPath
	args '-target', 'CLDC1.1'
	args compileJava.destinationDir
}

task cleanConf {
	dependsOn processResources
}

cleanConf << {
	if (isMidlet()) {
  	delete resJme.confPath
  }
}

task resJme(type: Copy) {
	dependsOn cleanConf
  dependsOn processResources
  from processResources.destinationDir
  into "${buildDir}/iptv/resources"
  ext.confDir = "$destinationDir/conf"
  ext.confPath = "$confDir/game.conf"
}

resJme << {
	if (isMidlet()) {
		if (file("${env.IGBT_HOME}/conf/${telcom}-${sp}.conf").exists()) {
			def text = renderTemplateFile("${env.IGBT_HOME}/conf/${telcom}-${sp}.conf", props)
			file(confPath).write(text.denormalize())
		}
		else {
			def text1 = renderTemplateFile("${env.IGBT_HOME}/conf/${telcom}.conf", props)
			def text2 = renderTemplateFile("${env.IGBT_HOME}/conf/${sp}.conf", props)
			file(confPath).write((text1+text2).denormalize())
		}
	}
}

task jarJme(type: Jar) {
	dependsOn preverify
  dependsOn resJme
	from preverify.destinationPath
	from resJme.destinationDir
	destinationDir = file("${buildDir}/iptv/jar")
}

task cleanJme << {
	if (isMidlet()) {
  	delete uberJme.jadPath
  	delete uberJme.archivePath
  }
}

task uberJme(type: Jar) {
	dependsOn cleanJme
	dependsOn preverify
  dependsOn resJme
	from configurations.refProvide.collect { it.isDirectory() ? it : zipTree(it) }
	from preverify.destinationPath
	from resJme.destinationDir
	destinationDir = file("${buildDir}/iptv/uberjar")
	ext.jadName = jadName(uberJme.archiveName)
	ext.jadPath = jadName(uberJme.archivePath)
	doLast {
		writeAppDesc(jadPath)
	}
}

task obfuscate(type: Exec) {
	dependsOn uberJme
	ext.destinationPath = "${buildDir}/iptv/publish"
	ext.archivePath = destinationPath+"/"+uberJme.archiveName
	executable "${env.PROGUARD_HOME}/bin/proguard.bat"
	args '-injars', uberJme.archivePath
	args '-outjars', archivePath
	configurations.wtkProvide.each {args '-libraryjars', it }
	args "-repackageclasses ''"
	args '-overloadaggressively'
	args '-microedition'
	args '-keep', 'public class * extends javax.microedition.midlet.MIDlet'
	doLast {
		copy {
			from uberJme.jadPath
			into destinationPath
		}
	}
}

task publishJme {
	dependsOn obfuscate
	doLast {
		if (isMidlet()) {
			def prefix = "${telcom}-${sp}-${archivesBaseName}"
			def nowStr = new Date().format('yyMMdd-HHmm')
			def destfile = "${obfuscate.destinationPath}/${prefix}-${nowStr}.zip"
			ant.zip(destfile: destfile, basedir: obfuscate.destinationPath) {
				include(name: uberJme.archiveName)
				include(name: uberJme.jadName)
			}
		}
	}
}

task testJme {
	dependsOn test
	dependsOn uberJme
}

testJme << {
	if (isMidlet()) {
		if (file("${env.IGBT_HOME}/jads/${telcom}-${sp}.jad").exists()) {
			def text = renderTemplateFile("${env.IGBT_HOME}/jads/${telcom}-${sp}.jad", props)
			file(uberJme.jadPath).append(text.denormalize())
		}
		else {
			def text = renderTemplateFile("${env.IGBT_HOME}/jads/${sp}.jad", props)
			file(uberJme.jadPath).append(text.denormalize())
		}
	}
}

testJme << {
	ant.java(classname: 'org.microemu.app.Main', fork: true, spawn: true) {
		arg(value: '--resizableDevice 640 530')
		arg(value: uberJme.jadPath)
		classpath {
			pathelement(location: "${env.IGBT_HOME}/libs/microemulator.jar")
			pathelement(location: uberJme.archivePath)
		}
	}
}

task pngout(type: Exec) {
	executable "${env.IGBT_HOME}/bin/pngout.bat"
	sourceSets.main.resources.srcDirs.each{ args it }
}

task helpJme << {
	println "task list:"
	println "--------------------------------------------------------------------------------------"
	println "clean:      clean build fils"
	println "uberJme:    create unobfuscated JAR, and standard JAD"
	println "publishJme: create obfuscated JAR, standard JAD, and zip together"
	println "testJme:    create unobfuscated JAR, add testing parameters to JAD, and launch MicroEmulator for testing JAR"
	println "uploadJme:  upload JAR to maven repository, can only be used by common component, such as 'itvgame-common'"
	println "pngout:     compress png files"
	println "idea:       generate config files for IDEA"
	println "eclipse:    generate config files for eclipse"
	println "mtj:        generate config files for eclipse and mtj plugin"
	println "helpJme:    show this message"
	println "--------------------------------------------------------------------------------------"
}

artifacts {
  jme uberJme.archivePath
}

uploadJme {
	dependsOn uberJme
	repositories {
    mavenDeployer {
  		if (validprop('releaseRepos')) {
        repository(url: releaseRepos) {
        	if (validprop('releaseReposUser')&&validprop('releaseReposPasswd')) {
        		authentication(userName: releaseReposUser, password: releaseReposPasswd)
        	}
        }
      }
      if (validprop('snapshotRepos')) {
        snapshotRepository(url: snapshotRepos) {
        	if (validprop('snapshotReposUser')&&validprop('snapshotReposPasswd')) {
        		authentication(userName: snapshotReposUser, password: snapshotReposPasswd)
        	}
        }
      }
    }
  }
}

task mtj {
	dependsOn 'eclipse'
	doLast {
		writeAppDesc(file('Application Descriptor'))
	}
}

mtj << {
	file('.mtj').write """<?xml version="1.0" encoding="UTF-8"?>
<mtjMetadata version="1.2.1.v201009031435">
   <signing projectSpecific="false" signProject="false">
      <alias/>
   </signing>
   <configurations>
      <configuration active="true" name="iptv">
         <device group="Sun Java(TM) Wireless Toolkit 2.5.2_01 for CLDC" name="DefaultColorPhone"/>
         <symbolSet name="DefaultColorPhone">
            <symbol name="screen.isColor" value="true"/>
            <symbol name="MMAPI" value="1.1"/>
            <symbol name="screen.bitDepth" value="8"/>
            <symbol name="JSR82" value="1.1"/>
            <symbol name="JSR226" value="1.0"/>
            <symbol name="MIDP" value="2.0"/>
            <symbol name="JSR229" value="1.1"/>
            <symbol name="SATSA-PKI" value="1.0"/>
            <symbol name="CLDC" value="1.1"/>
            <symbol name="JSR179" value="1.0"/>
            <symbol name="WMA" value="2.0"/>
            <symbol name="SATSA-JCRMI" value="1.0"/>
            <symbol name="J2ME-WS" value="1.0"/>
            <symbol name="screen.width" value="240"/>
            <symbol name="JSR238" value="1.0"/>
            <symbol name="JSR239" value="1.0"/>
            <symbol name="screen.isTouch" value="false"/>
            <symbol name="JSR211" value="1.0"/>
            <symbol name="JSR234" value="1.0"/>
            <symbol name="SATSA-APDU" value="1.0"/>
            <symbol name="JSR75" value="1.0"/>
            <symbol name="J2ME-XMLRPC" value="1.0"/>
            <symbol name="JSR184" value="1.1"/>
            <symbol name="SATSA-CRYPTO" value="1.0"/>
            <symbol name="version.configuration" value="CLDC-1.1"/>
            <symbol name="version.profile" value="MIDP-2.1"/>
            <symbol name="JSR180" value="1.0"/>
            <symbol name="screen.height" value="320"/>
         </symbolSet>
      </configuration>
   </configurations>
</mtjMetadata>"""
}

eclipse.classpath.file {
    whenMerged { classpath ->
        classpath.entries.removeAll { entry -> entry.kind == 'con' }
    }
}

